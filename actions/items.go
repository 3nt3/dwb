package actions

import (
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/nielsdingsbums/dwb/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Item)
// DB Table: Plural (items)
// Resource: Plural (Items)
// Path: Plural (/items)
// View Template Folder: Plural (/templates/items/)

// ItemsResource is the resource for the Item model
type ItemsResource struct {
	buffalo.Resource
}

// List gets all Items. This function is mapped to the path
// GET /items
func (v ItemsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	items := &models.Items{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.Paginate(1, 100000)
	//q.Paginator.PerPage = 10000000
	if err := q.All(items); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	//c.Set("hours", hours)

	classes := &[]models.Class{}

	if err := q.All(classes); err != nil {
		return errors.WithStack(err)
	}

	var futureItems []models.Item
	for _, item := range *items {
		date, _ := time.Parse("02.01.2006", item.DueDate)
		//log.Print(item)
		if date.After(time.Now()) {
			futureItems = append(futureItems, item)
		}
	}

	//log.Printf("%+v", futureItems)

	// TODO: Make this stuff woooooork!!

	for _, item := range futureItems {
		for _, class := range *classes {
			log.Printf("[+] className: %s, itemName: %s", class.Name, item.Class)
			if class.Name == item.Class {
				foo := class
				tx.Destroy(&class)
				//log.Println("This name fits.")
				date, err := time.Parse("02.01.2006", item.DueDate)
				if err != nil {
					log.Println(err.Error())
				}
				day := int(date.Weekday())
				if foo.Day == day {
					log.Println("[+]  => the day is fitting")
					//log.Printf("value: %d", foo.Value)
					foo.Value++
					//log.Printf("value: %d", foo.Value)
				}
				tx.Create(&foo)
				//log.Printf("%+v", &foo)
			} else {
				log.Println("[-]  => This class is not fitting")
			}
		}
	}

	days := [5][9]models.Class{}

	for _, item := range *classes {
		days[item.Day-1][item.Hour-1] = item
	}

	for i, day := range days {
		log.Printf("[+] Day %d: %v", i, day)
	}

	//log.Println(rows)
	c.Set("days", days)

	return c.Render(200, r.Auto(c, items))
}

// Show gets the data for one Item. This function is mapped to
// the path GET /items/{item_id}
func (v ItemsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Item
	item := &models.Item{}

	// To find the Item the parameter item_id is used.
	if err := tx.Find(item, c.Param("item_id")); err != nil {
		return c.Error(404, err)
	}

	var informationSet bool
	if item.Information.String != "" {
		informationSet = true
	} else {
		informationSet = false
	}
	c.Set("informationSet", informationSet)

	return c.Render(200, r.Auto(c, item))
}

// New renders the form for creating a new Item.
// This function is mapped to the path GET /items/new
func (v ItemsResource) New(c buffalo.Context) error {
	classes := []string{"Englisch", "Geschichte", "Chemie", "Lernzeit", "Sport", "Mathematik", "Biologie", "Geschichte", "Informatik", "Spanisch", "Ökologie", "ev. Religion", "kath. Religion", "p. Philosophie", "Latein", "Französisch"}
	sort.Strings(classes)
	c.Set("classes", classes)

	t := time.Now()
	currentDate := fmt.Sprintf("%02d.%02d.%d", t.Day(), t.Month(), t.Year())

	c.Set("currentDate", currentDate)

	return c.Render(200, r.Auto(c, &models.Item{}))
}

// Create adds a Item to the DB. This function is mapped to the
// path POST /items
func (v ItemsResource) Create(c buffalo.Context) error {
	// Allocate an empty Item
	item := &models.Item{}

	// Bind item to the html form elements
	if err := c.Bind(item); err != nil {
		log.Print(err)
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// TODO some kind of migration from google sheets

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(item)
	if err != nil {
		return errors.WithStack(err)
	}

	_, err = time.Parse("02.01.2006", item.DueDate)
	if err != nil {
		return c.Render(422, r.Auto(c, item))
	}

	_, err = time.Parse("02.01.2006", item.CreationDate)
	if err != nil {
		return c.Render(422, r.Auto(c, item))
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, item))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Item was created successfully")

	// and redirect to the items index page
	return c.Render(201, r.Auto(c, item))
}

// Edit renders a edit form for a Item. This function is
// mapped to the path GET /items/{item_id}/edit
func (v ItemsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Item
	item := &models.Item{}

	if err := tx.Find(item, c.Param("item_id")); err != nil {
		return c.Error(404, err)
	}

	classes := []string{"Englisch", "Geschichte", "Chemie", "Lernzeit", "Sport", "Mathematik", "Biologie", "Geschichte", "Informatik", "Spanisch", "Ökologie", "ev. Religion", "kath. Religion", "p. Philosophie", "Latein", "Französisch"}

	c.Set("dueDate", item.DueDate)
	c.Set("createdAt", item.CreatedAt)
	c.Set("classes", classes)
	return c.Render(200, r.Auto(c, item))
}

// Update changes a Item in the DB. This function is mapped to
// the path PUT /items/{item_id}
func (v ItemsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Item
	item := &models.Item{}

	if err := tx.Find(item, c.Param("item_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Item to the html form elements
	if err := c.Bind(item); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(item)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, item))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Item was updated successfully")

	// and redirect to the items index page
	return c.Render(200, r.Auto(c, item))
}

// Destroy deletes a Item from the DB. This function is mapped
// to the path DELETE /items/{item_id}
func (v ItemsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Item
	item := &models.Item{}

	// To find the Item the parameter item_id is used.
	if err := tx.Find(item, c.Param("item_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(item); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Item was destroyed successfully")

	// Redirect to the items index page
	return c.Render(200, r.Auto(c, item))
}
